# "$schema" = 'https://starship.rs/config-schema.json'
# format = '$all'
add_newline = false
format = """\
  󰣇 \
  $directory\
  $git_branch$git_commit$git_state $git_status\
  $character\
  $python
"""


# style_choices:
# bold
# italic
# underline
# dimmed
# inverted
# blink
# hidden
# strikethrough
# bg:<color>
# fg:<color>
# <color>
# none

# $crystal$golang$java$nodejs$php$python$rust\
# [character]
# success_symbol = "[  ]($bold fg:#f8f8f2)"
# error_symbol = "[ ➤ ]($bold fg:#fb4934)"

[directory]
disabled = false
format = "[$path](bold fg:#8be9fd)"
truncate_to_repo = false
# home_symbol = "" #https://github.com/starship/starship/pull/2198/files

[git_branch]
format = " [  $branch](fg:#9198a1)"

[git_status]
format = '[[($all_status$ahead_behind )](fg:#769ff0)]($style)'
style = "bg:#394260"
ahead = '⇡${count}'
diverged = '⇕⇡${ahead_count}⇣${behind_count}'
behind = '⇣${count}'

# [git_branch]
# symbol = ""
# style = "bg:#394260"
# format = '[[ $symbol $branch ](fg:#769ff0 bg:#394260)]($style)'
#
# [git_status]
# style = "bg:#394260"
# format = '[[($all_status$ahead_behind )](fg:#769ff0 bg:#394260)]($style)'
# ahead = '⇡${count}'
# diverged = '⇕⇡${ahead_count}⇣${behind_count}'
# behind = '⇣${count}'


[time]
disabled = false
time_format = "%R"                            # Hour:Minute Format
format = '[[  $time ](fg:#a0a9cb )]($style)'

[deno]
format = " [deno](italic) [∫ $version](green bold)"
version_format = "${raw}"

[lua]
format = " [lua](italic) [${symbol}${version}]($style)"
version_format = "${raw}"
symbol = "⨀ "
style = "bold bright-yellow"

[nodejs]
format = " [node](italic) [◫ ](bold bright-green)"
version_format = "${raw}"
detect_files = ["package-lock.json", "yarn.lock"]
detect_folders = ["node_modules"]
detect_extensions = []


[custom.venv]
description = "Show qualified virtualenv dir, if not IN the dir tree where it is resides"
# from directory ../project-name/, . ~/some/other/.venv/bin/activate -- displays 'other/.venv'
# from directory .../other/src, .../other, etc. , -- displays just .venv
command = """
    qual=$(basename $(dirname "$VIRTUAL_ENV"));
    venv=$(basename "$VIRTUAL_ENV");
    pat=".*/${qual}/*(/.*)?$";
    [[ "$PWD" =~ $pat ]] && printf "($venv)" || printf "($qual/$venv)"
    """
when = '''[[ -n "$VIRTUAL_ENV" ]]'''
format = '[$output](blue)'


[python]

symbol = " "
format = "[${symbol}(${virtualenv}) ]($style)"

[ruby]
style = "bold red"

[rust]
format = " rs $symbol"
symbol = " "

# [package]
# format = " [pkg](italic dimmed) [$symbol$version]($style)"
# version_format = "${raw}"
# symbol = "◨ "
# style = "dimmed yellow italic bold"

[swift]
format = " [sw](italic) [${symbol}${version}]($style)"
symbol = " "
style = "bold bright-red"
version_format = "${raw}"

[aws]
disabled = true
format = " [aws](italic) [$symbol $profile $region]($style)"
style = "bold blue"
symbol = "▲ "

[buf]
symbol = "■ "
format = " [buf](italic) [$symbol $version $buf_version]($style)"

[c]
symbol = " "
format = " [$symbol($version(-$name))]($style)"

[conda]
symbol = "◯ "
format = " conda [$symbol$environment]($style)"

[dart]
symbol = " "
format = " dart [$symbol($version )]($style)"

[docker_context]
symbol = "◧ "
format = " docker [$symbol$context]($style)"

[elixir]
symbol = " "
format = " exs [$symbol $version OTP $otp_version ]($style)"

[elm]
symbol = " "
format = " elm [$symbol($version )]($style)"

[golang]
symbol = " "
format = " go [$symbol($version )]($style)"

[haskell]
symbol = "❯λ "
format = " hs [$symbol($version )]($style)"

[java]
symbol = " "
format = " java [${symbol}(${version} )]($style)"

[julia]
symbol = "◎ "
format = " jl [$symbol($version )]($style)"

[memory_usage]
symbol = "▪▫▪ "
format = " mem [${ram}( ${swap})]($style)"

[nim]
symbol = "▴▲▴ "
format = " nim [$symbol($version )]($style)"

[spack]
symbol = "◇ "
format = " spack [$symbol$environment]($style)"
